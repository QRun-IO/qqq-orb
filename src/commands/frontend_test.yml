description: >
  Tests the React application
  - Removes any preinstalled Chrome/ChromeDriver
  - Installs current Chrome
  - Installs browser dependencies
  - Installs dockerize (wait-for utility)
  - Restores Maven dependency cache
  - Ensures Node dependencies exist
  - Builds the React app, starts the server, waits for it to come up, then runs Selenium tests via Maven
  - Collects JUnit XML test results
  - Stores test results and screenshots
  - Saves Maven cache for future builds
steps:
  # Ensure no stale Chrome/Driver is shadowing the PATH (your base image had Chrome 109)
  - run:
      name: Remove any preinstalled Chrome/ChromeDriver
      command: <<include(scripts/frontend_test_cleanup.sh)>>

  # Install current Chrome; DO NOT install chromedriver (let Selenium 4 auto-manage it)
  - browser-tools/install-chrome

  # System libs Chrome needs in headless CI
  - run:
      name: Install browser dependencies
      command: <<include(scripts/frontend_test_dependencies.sh)>>

  # Utility to wait for the dev server to come up
  - run:
      name: Install dockerize (wait-for utility)
      command: <<include(scripts/frontend_test_dockerize.sh)>>

  # Restore Maven deps (Node deps are expected from prior build step; optional guard below)
  - restore_cache:
      keys:
        - v1-dependencies-{{ checksum "pom.xml" }}
  - restore_cache:
      keys:
        - v1-npm-dependencies-{{ checksum "package.json" }}

  # (Optional) Guard: if node_modules is missing, install it quickly so "npm run build" works
  - run:
      name: Ensure Node dependencies exist (optional guard)
      command: <<include(scripts/frontend_test_npm_guard.sh)>>

  # Diagnostics: confirm Chrome present; ensure no chromedriver on PATH (Selenium should fetch it)
  - run:
      name: Chrome diagnostics
      command: <<include(scripts/frontend_test_diagnostics.sh)>>

  # Build the React app, start it, wait until it's live, then run Selenium tests via Maven.
  # Note: Using 'mvn test' to avoid GPG signing during testing phase.
  # GPG signing will happen later in mvn_jar_deploy when deploying to Maven Central.
  - run:
      name: Build app, start server, run tests
      command: <<include(scripts/frontend_test_run.sh)>>

  # Always collect and publish test results & screenshots
  - run:
      name: Collect JUnit XML test results
      when: always
      command: <<include(scripts/frontend_test_collect_results.sh)>>
  - store_test_results:
      path: ~/test-results
  - store_artifacts:
      path: /tmp/QSeleniumScreenshots
      when: always

  # Re-cache Maven deps
  - save_cache:
      paths:
        - ~/.m2
      key: v1-dependencies-{{ checksum "pom.xml" }}

  # Re-cache Node deps
  - save_cache:
      paths:
        - node_modules
      key: v1-npm-dependencies-{{ checksum "package.json" }}
